name: "Publish Release"

on:
    workflow_dispatch:
        inputs:
            release-type:
                description: "Choose release type (release or pre-release)"
                required: true
                default: "release"
                type: choice
                options:
                    - pre-release
                    - release
            branch:
                description: "Branch to publish from (default: main)"
                required: false
                default: "main"
                type: string
    repository_dispatch:
        types: [auto-publish]

permissions:
    contents: write
    packages: write
    checks: write
    pull-requests: write

jobs:
    test:
        uses: ./.github/workflows/test.yml

    publish:
        needs: test
        name: Publish Extension
        runs-on: ubuntu-latest
        environment: publish
        env:
            CI: false

        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.inputs.branch || github.event.client_payload.branch || 'main' }}
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20.15.1

            # Cache root dependencies - only reuse if package-lock.json exactly matches
            - name: Cache root dependencies
              uses: actions/cache@v4
              id: root-cache
              with:
                  path: node_modules
                  key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

            # Cache webview-ui dependencies - only reuse if package-lock.json exactly matches
            - name: Cache webview-ui dependencies
              uses: actions/cache@v4
              id: webview-cache
              with:
                  path: webview-ui/node_modules
                  key: ${{ runner.os }}-npm-webview-${{ hashFiles('webview-ui/package-lock.json') }}

            - name: Install root dependencies
              if: steps.root-cache.outputs.cache-hit != 'true'
              run: npm ci

            - name: Install webview-ui dependencies
              if: steps.webview-cache.outputs.cache-hit != 'true'
              run: cd webview-ui && npm ci

            - name: Install Publishing Tools
              run: npm install -g vsce ovsx

            - name: Get Version
              id: get_version
              run: |
                  # Get base version from package.json
                  BASE_VERSION=$(node -p "require('./package.json').version")

                  # If this is from a sync branch (repository_dispatch), add counter to patch version
                  if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
                    # Get counter from branch name if it exists
                    BRANCH="${{ github.event.client_payload.branch }}"
                    if [[ "$BRANCH" =~ sync-upstream-v[0-9]+\.[0-9]+\.[0-9]+([1-9][0-9]) ]]; then
                      COUNTER="${BASH_REMATCH[1]}"
                    else
                      COUNTER="${{ github.event.client_payload.counter }}"
                      if [ -z "$COUNTER" ]; then
                        COUNTER="10"
                      fi
                    fi
                    
                    # Split version into parts
                    IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
                    
                    # Append counter to patch version
                    VERSION="${MAJOR}.${MINOR}.${PATCH}${COUNTER}"
                    echo "Using version $VERSION with counter $COUNTER from branch $BRANCH"
                  else
                    VERSION="${BASE_VERSION}"
                  fi

                  echo "version=$VERSION" >> $GITHUB_OUTPUT

                  # Update package.json if version changed
                  if [ "$VERSION" != "$BASE_VERSION" ]; then
                    npm version "$VERSION" --no-git-tag-version
                  fi

            - name: Create Git Tag
              id: create_tag
              run: |
                  TAG="v${{ steps.get_version.outputs.version }}"
                  echo "tag=$TAG" >> $GITHUB_OUTPUT
                  echo "Tagging with $TAG"
                  git tag "$TAG"
                  git push origin "$TAG"

            - name: Package and Publish Extension
              env:
                  VSCE_PAT: ${{ secrets.VSCE_PAT }}
                  OVSX_PAT: ${{ secrets.OVSX_PAT }}
              run: |
                  VERSION="${{ steps.get_version.outputs.version }}"

                  # Update version in package.json and package-lock.json
                  npm version "$VERSION" --no-git-tag-version --allow-same-version

                  # Also update version in webview-ui if it exists
                  if [ -f "webview-ui/package.json" ]; then
                    cd webview-ui
                    npm version "$VERSION" --no-git-tag-version --allow-same-version
                    cd ..
                  fi

                  # Required to generate the .vsix
                  vsce package --out "goodloops-cline-$VERSION.vsix"

                  # Determine release type (from workflow_dispatch input or repository_dispatch payload)
                  RELEASE_TYPE="${{ github.event.inputs.release-type || github.event.client_payload.release-type }}"

                  if [ "$RELEASE_TYPE" = "pre-release" ]; then
                    echo "Publishing pre-release version $VERSION..."
                    npm run publish:marketplace:prerelease
                    echo "Successfully published pre-release version $VERSION to VS Code Marketplace and Open VSX Registry"
                  else
                    echo "Publishing release version $VERSION..."
                    npm run publish:marketplace
                    echo "Successfully published release version $VERSION to VS Code Marketplace and Open VSX Registry"
                  fi

            # - name: Get Changelog Entry
            #   id: changelog
            #   uses: mindsers/changelog-reader-action@v2
            #   with:
            #       # This expects a standard Keep a Changelog format
            #       # "latest" means it will read whichever is the most recent version
            #       # set in "## [1.2.3] - 2025-01-28" style
            #       version: latest

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.create_tag.outputs.tag }}
                  files: "*.vsix"
                  # body: ${{ steps.changelog.outputs.content }}
                  generate_release_notes: true
                  prerelease: ${{ github.event.inputs.release-type == 'pre-release' || github.event.client_payload.release-type == 'pre-release' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
